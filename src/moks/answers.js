export const answersMok = [
  {
    owner: {
      reputation: 25221,
      user_id: 444829,
      user_type: 'registered',
      profile_image:
        'https://www.gravatar.com/avatar/cab253e189e0f34e97bcc22686784d33?s=128&d=identicon&r=PG',
      display_name: 'Paul S',
      link: 'https://stackoverflow.com/users/444829/paul-s',
    },
    is_accepted: true,
    score: 1595,
    last_activity_date: 1587936457,
    last_edit_date: 1587936457,
    creation_date: 1486579181,
    answer_id: 42121109,
    question_id: 31079081,
    content_license: 'CC BY-SA 4.0',
    body:
      '<blockquote>\n  <p><strong>React Router v5.1.0 with hooks</strong></p>\n</blockquote>\n\n<p>There is a new <code>useHistory</code> hook in React Router >5.1.0 if you are using React >16.8.0 and functional components.</p>\n\n<pre><code>import { useHistory } from "react-router-dom";\n\nfunction HomeButton() {\n  const history = useHistory();\n\n  function handleClick() {\n    history.push("/home");\n  }\n\n  return (\n    &lt;button type="button" onClick={handleClick}&gt;\n      Go home\n    &lt;/button&gt;\n  );\n}\n</code></pre>\n\n<blockquote>\n  <p><strong>React Router v4</strong></p>\n</blockquote>\n\n<p>With v4 of React Router, there are three approaches that you can take to programmatic routing within components.</p>\n\n<ol>\n<li>Use the <code>withRouter</code> higher-order component.</li>\n<li>Use composition and render a <code>&lt;Route&gt;</code></li>\n<li>Use the <code>context</code>.</li>\n</ol>\n\n<p>React Router is mostly a wrapper around the <a href="https://github.com/ReactTraining/history" rel="noreferrer"><code>history</code></a> library. <code>history</code> handles interaction with the browser\'s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/history" rel="noreferrer"><code>window.history</code></a> for you with its browser and hash histories. It also provides a memory history which is useful for environments that don\'t have a global history. This is particularly useful in mobile app development (<code>react-native</code>) and unit testing with Node.</p>\n\n<p>A <code>history</code> instance has two methods for navigating: <code>push</code> and <code>replace</code>. If you think of the <code>history</code> as an array of visited locations, <code>push</code> will add a new location to the array and <code>replace</code> will replace the current location in the array with the new one. Typically you will want to use the <code>push</code> method when you are navigating.</p>\n\n<p>In earlier versions of React Router, you had to create your own <code>history</code> instance, but in v4 the <code>&lt;BrowserRouter&gt;</code>, <code>&lt;HashRouter&gt;</code>, and <code>&lt;MemoryRouter&gt;</code> components will create a browser, hash, and memory instances for you. React Router makes the properties and methods of the <code>history</code> instance associated with your router available through the context, under the <code>router</code> object.</p>\n\n<h3>1. Use the <code>withRouter</code> higher-order component</h3>\n\n<p>The <code>withRouter</code> higher-order component will inject the <code>history</code> object as a prop of the component. This allows you to access the <code>push</code> and <code>replace</code> methods without having to deal with the <code>context</code>.</p>\n\n<pre class="lang-js prettyprint-override"><code>import { withRouter } from \'react-router-dom\'\n// this also works with react-router-native\n\nconst Button = withRouter(({ history }) =&gt; (\n  &lt;button\n    type=\'button\'\n    onClick={() =&gt; { history.push(\'/new-location\') }}\n  &gt;\n    Click Me!\n  &lt;/button&gt;\n))\n</code></pre>\n\n<h3>2. Use composition and render a <code>&lt;Route&gt;</code></h3>\n\n<p>The <code>&lt;Route&gt;</code> component isn\'t just for matching locations. You can render a pathless route and <strong>it will always match the current location</strong>. The <code>&lt;Route&gt;</code> component passes the same props as <code>withRouter</code>, so you will be able to access the <code>history</code> methods through the <code>history</code> prop.</p>\n\n<pre class="lang-js prettyprint-override"><code>import { Route } from \'react-router-dom\'\n\nconst Button = () =&gt; (\n  &lt;Route render={({ history}) =&gt; (\n    &lt;button\n      type=\'button\'\n      onClick={() =&gt; { history.push(\'/new-location\') }}\n    &gt;\n      Click Me!\n    &lt;/button&gt;\n  )} /&gt;\n)\n</code></pre>\n\n<h3>3. Use the context*</h3>\n\n<p><strong>But you probably should not</strong></p>\n\n<p>The last option is one that you should only use if you feel comfortable working with React\'s <a href="https://facebook.github.io/react/docs/context.html" rel="noreferrer">context</a> model (React\'s Context API is stable as of v16).</p>\n\n<pre class="lang-js prettyprint-override"><code>const Button = (props, context) =&gt; (\n  &lt;button\n    type=\'button\'\n    onClick={() =&gt; {\n      // context.history.push === history.push\n      context.history.push(\'/new-location\')\n    }}\n  &gt;\n    Click Me!\n  &lt;/button&gt;\n)\n\n// you need to specify the context type so that it\n// is available within the component\nButton.contextTypes = {\n  history: React.PropTypes.shape({\n    push: React.PropTypes.func.isRequired\n  })\n}\n</code></pre>\n\n<p>1 and 2 are the simplest choices to implement, so for most use cases, they are your best bets.</p>\n',
  },
  {
    owner: {
      reputation: 11586,
      user_id: 1603820,
      user_type: 'registered',
      profile_image: 'https://i.stack.imgur.com/4yI1V.jpg?s=128&g=1',
      display_name: 'Felipe Skinner',
      link: 'https://stackoverflow.com/users/1603820/felipe-skinner',
    },
    is_accepted: false,
    score: 951,
    last_activity_date: 1571420672,
    last_edit_date: 1571420672,
    creation_date: 1435340979,
    answer_id: 31079244,
    question_id: 31079081,
    content_license: 'CC BY-SA 4.0',
    body:
      '<blockquote>\n  <p><strong>React-Router 5.1.0+</strong> Answer (using hooks and React >16.8)</p>\n</blockquote>\n\n<p>You can use the new <code>useHistory</code> hook on Functional Components and Programmatically navigate:</p>\n\n<pre><code>import { useHistory } from "react-router-dom";\n\nfunction HomeButton() {\n  let history = useHistory();\n  // use history.push(\'/some/path\') here\n};\n</code></pre>\n\n<blockquote>\n  <p><strong>React-Router 4.0.0+</strong> Answer</p>\n</blockquote>\n\n<p>In 4.0 and above, use the history as a prop of your component.</p>\n\n<pre class="lang-js prettyprint-override"><code>class Example extends React.Component {\n   // use `this.props.history.push(\'/some/path\')` here\n};\n</code></pre>\n\n<p>NOTE: this.props.history does not exist in the case your component was not rendered by <code>&lt;Route&gt;</code>. You should use <code>&lt;Route path="..." component={YourComponent}/&gt;</code> to have this.props.history in YourComponent</p>\n\n<blockquote>\n  <p><strong>React-Router 3.0.0+</strong> Answer</p>\n</blockquote>\n\n<p>In 3.0 and above, use the router as a prop of your component.</p>\n\n<pre class="lang-js prettyprint-override"><code>class Example extends React.Component {\n   // use `this.props.router.push(\'/some/path\')` here\n};\n</code></pre>\n\n<blockquote>\n  <p><strong>React-Router 2.4.0+</strong> Answer</p>\n</blockquote>\n\n<p>In 2.4 and above, use a higher order component to get the router as a prop of your component.</p>\n\n<pre class="lang-js prettyprint-override"><code>import { withRouter } from \'react-router\';\n\nclass Example extends React.Component {\n   // use `this.props.router.push(\'/some/path\')` here\n};\n\n// Export the decorated class\nvar DecoratedExample = withRouter(Example);\n\n// PropTypes\nExample.propTypes = {\n  router: React.PropTypes.shape({\n    push: React.PropTypes.func.isRequired\n  }).isRequired\n};\n</code></pre>\n\n<blockquote>\n  <p><strong>React-Router 2.0.0+</strong> Answer</p>\n</blockquote>\n\n<p>This version is backwards compatible with 1.x so there\'s no need to an Upgrade Guide. Just going through the examples should be good enough.</p>\n\n<p>That said, if you wish to switch to the new pattern, there\'s a browserHistory module inside the router that you can access with</p>\n\n<p><code>import { browserHistory } from \'react-router\'</code></p>\n\n<p>Now you have access to your browser history, so you can do things like push, replace, etc... Like:</p>\n\n<p><code>browserHistory.push(\'/some/path\')</code></p>\n\n<p>Further reading:\n<a href="https://github.com/reactjs/react-router/blob/latest/docs/guides/Histories.md" rel="noreferrer">Histories</a> and\n<a href="https://github.com/reactjs/react-router/blob/latest/docs/guides/NavigatingOutsideOfComponents.md" rel="noreferrer">Navigation</a></p>\n\n<hr>\n\n<blockquote>\n  <p><strong>React-Router 1.x.x</strong> Answer</p>\n</blockquote>\n\n<p>I will not go into upgrading details. You can read about that in the <a href="https://github.com/rackt/react-router/blob/master/upgrade-guides/v1.0.0.md" rel="noreferrer">Upgrade Guide</a></p>\n\n<p>The main change about the question here is the change from Navigation mixin to History. Now it\'s using the browser historyAPI to change route so we will use <code>pushState()</code> from now on.</p>\n\n<p>Here\'s an exemple using Mixin:</p>\n\n<pre class="lang-js prettyprint-override"><code>var Example = React.createClass({\n  mixins: [ History ],\n  navigateToHelpPage () {\n    this.history.pushState(null, `/help`);\n  }\n})\n</code></pre>\n\n<p>Note that this <code>History</code> comes from <a href="https://github.com/rackt/history" rel="noreferrer">rackt/history</a> project. Not from React-Router itself.</p>\n\n<p>If you don\'t want to use Mixin for some reason (maybe because of ES6 class), then you can access the history that you get from the router from <code>this.props.history</code>. It will be only accessible for the components rendered by your Router. So, if you want to use it in any child components it needs to be passed down as an attribute via <code>props</code>.</p>\n\n<p>You can read more about the new release at their <a href="https://github.com/rackt/react-router/tree/1.0.x/docs" rel="noreferrer">1.0.x documentation</a></p>\n\n<p>Here is <a href="https://github.com/rackt/react-router/blob/1.0.x/docs/guides/advanced/NavigatingOutsideOfComponents.md" rel="noreferrer">a help page specifically about navigating outside your component</a></p>\n\n<p>It recommends grabbing a reference <code>history = createHistory()</code> and calling <code>replaceState</code> on that.</p>\n\n<blockquote>\n  <p><strong>React-Router 0.13.x</strong> Answer</p>\n</blockquote>\n\n<p>I got into the same problem and could only find the solution with the Navigation mixin that comes with react-router.</p>\n\n<p>Here\'s how I did it</p>\n\n<pre class="lang-js prettyprint-override"><code>import React from \'react\';\nimport {Navigation} from \'react-router\';\n\nlet Authentication = React.createClass({\n  mixins: [Navigation],\n\n  handleClick(e) {\n    e.preventDefault();\n\n    this.transitionTo(\'/\');\n  },\n\n  render(){\n    return (&lt;div onClick={this.handleClick}&gt;Click me!&lt;/div&gt;);\n  }\n});\n</code></pre>\n\n<p>I was able to call <code>transitionTo()</code> without the need to access <code>.context</code></p>\n\n<p>Or you could try the fancy ES6 <code>class</code></p>\n\n<pre class="lang-js prettyprint-override"><code>import React from \'react\';\n\nexport default class Authentication extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n\n    this.context.router.transitionTo(\'/\');\n  }\n\n  render(){\n    return (&lt;div onClick={this.handleClick}&gt;Click me!&lt;/div&gt;);\n  }\n}\n\nAuthentication.contextTypes = {\n  router: React.PropTypes.func.isRequired\n};\n</code></pre>\n\n<blockquote>\n  <p><strong>React-Router-Redux</strong></p>\n  \n  <p><strong>Note:</strong> if you\'re using Redux, there is another project called\n  <a href="https://github.com/reactjs/react-router-redux" rel="noreferrer">React-Router-Redux</a> that gives you\n  redux bindings for ReactRouter, using somewhat the same approach that\n  <a href="https://github.com/rackt/react-redux" rel="noreferrer">React-Redux</a> does</p>\n</blockquote>\n\n<p>React-Router-Redux has a few methods available that allow for simple navigating from inside action creators. These can be particularly useful for people that have existing architecture in React Native, and they wish to utilize the same patterns in React Web with minimal boilerplate overhead.</p>\n\n<p>Explore the following methods:</p>\n\n<ul>\n<li><code>push(location)</code></li>\n<li><code>replace(location)</code></li>\n<li><code>go(number)</code></li>\n<li><code>goBack()</code></li>\n<li><code>goForward()</code></li>\n</ul>\n\n<p>Here is an example usage, with <a href="https://www.npmjs.com/package/redux-thunk" rel="noreferrer">Redux-Thunk</a>:</p>\n\n<p><strong>./actioncreators.js</strong></p>\n\n<pre class="lang-js prettyprint-override"><code>import { goBack } from \'react-router-redux\'\n\nexport const onBackPress = () =&gt; (dispatch) =&gt; dispatch(goBack())\n</code></pre>\n\n<p><strong>./viewcomponent.js</strong></p>\n\n<pre class="lang-js prettyprint-override"><code>&lt;button\n  disabled={submitting}\n  className="cancel_button"\n  onClick={(e) =&gt; {\n    e.preventDefault()\n    this.props.onBackPress()\n  }}\n&gt;\n  CANCEL\n&lt;/button&gt;\n</code></pre>\n',
  },
  {
    owner: {
      reputation: 6371,
      user_id: 1830623,
      user_type: 'registered',
      accept_rate: 50,
      profile_image:
        'https://www.gravatar.com/avatar/8cc2ef0e1b8c7cc374b3a8b3898c85cf?s=128&d=identicon&r=PG',
      display_name: 'Bobby',
      link: 'https://stackoverflow.com/users/1830623/bobby',
    },
    is_accepted: false,
    score: 514,
    last_activity_date: 1522090201,
    last_edit_date: 1522090201,
    creation_date: 1453149134,
    answer_id: 34863577,
    question_id: 31079081,
    content_license: 'CC BY-SA 3.0',
    body:
      '<blockquote>\n  <p><strong>React-Router v2</strong></p>\n</blockquote>\n\n<p>For the most recent release (<code>v2.0.0-rc5</code>), the recommended navigation method is by directly pushing onto the history singleton. You can see that in action in the <a href="https://github.com/rackt/react-router/blob/master/docs/guides/NavigatingOutsideOfComponents.md" rel="noreferrer">Navigating outside of Components doc</a>. </p>\n\n<p>Relevant excerpt:</p>\n\n<pre class="lang-js prettyprint-override"><code>import { browserHistory } from \'react-router\';\nbrowserHistory.push(\'/some/path\');\n</code></pre>\n\n<p>If using the newer react-router API, you need to make use of the <code>history</code> from <code>this.props</code> when inside of components so:</p>\n\n<pre class="lang-js prettyprint-override"><code>this.props.history.push(\'/some/path\');\n</code></pre>\n\n<p>It also offers <code>pushState</code> but that is deprecated per logged warnings.</p>\n\n<p>If using <code>react-router-redux</code>, it offers a <code>push</code> function you can dispatch like so:</p>\n\n<pre class="lang-js prettyprint-override"><code>import { push } from \'react-router-redux\';\nthis.props.dispatch(push(\'/some/path\'));\n</code></pre>\n\n<p>However this may be only used to change the URL, not to actually navigate to the page.</p>\n',
  },
  {
    owner: {
      reputation: 1298,
      user_id: 132444,
      user_type: 'registered',
      accept_rate: 75,
      profile_image:
        'https://www.gravatar.com/avatar/1f2a7b1b49ba57c11f478189bad814e7?s=128&d=identicon&r=PG',
      display_name: 'Alex Miller',
      link: 'https://stackoverflow.com/users/132444/alex-miller',
    },
    is_accepted: false,
    score: 58,
    last_activity_date: 1522089649,
    last_edit_date: 1522089649,
    creation_date: 1453495617,
    answer_id: 34955668,
    question_id: 31079081,
    content_license: 'CC BY-SA 3.0',
    body:
      '<p>Here\'s how you do this with <a href="https://github.com/rackt/react-router/blob/master/upgrade-guides/v2.0.0.md" rel="noreferrer"><code>react-router v2.0.0</code></a> with <a href="http://babeljs.io/blog/2015/06/07/react-on-es6-plus/" rel="noreferrer">ES6</a>. <code>react-router</code> has moved away from mixins.</p>\n\n<pre class="lang-js prettyprint-override"><code>import React from \'react\';\n\nexport default class MyComponent extends React.Component {\n  navigateToPage = () =&gt; {\n    this.context.router.push(\'/my-route\')\n  };\n\n  render() {\n    return (\n      &lt;button onClick={this.navigateToPage}&gt;Go!&lt;/button&gt;\n    );\n  }\n}\n\nMyComponent.contextTypes = {\n  router: React.PropTypes.object.isRequired\n}\n</code></pre>\n',
  },
  {
    owner: {
      reputation: 1104,
      user_id: 2353845,
      user_type: 'registered',
      accept_rate: 80,
      profile_image:
        'https://www.gravatar.com/avatar/e59d358be7e4daf669f822c9f2bf928b?s=128&d=identicon&r=PG',
      display_name: 'Eric Martin',
      link: 'https://stackoverflow.com/users/2353845/eric-martin',
    },
    is_accepted: false,
    score: 55,
    last_activity_date: 1523879518,
    last_edit_date: 1523879518,
    creation_date: 1496787266,
    answer_id: 44400555,
    question_id: 31079081,
    content_license: 'CC BY-SA 3.0',
    body:
      '<blockquote>\n  <p><strong>React-Router 4.x Answer :</strong></p>\n</blockquote>\n\n<p>On my end, I like to have a single history object that I can carry even outside components. What I like to do is to have a single history.js file that I import on demand, and just manipulate it.</p>\n\n<p>You just have to change <code>BrowserRouter</code> to Router, and specify the history prop. This doesn\'t change anything for you except that you have your own history object that you can manipulate as you want.</p>\n\n<p>You need to install <a href="https://github.com/reacttraining/history" rel="noreferrer">history</a>, the library used by <code>react-router</code>.</p>\n\n<p>Example usage, ES6 notation :</p>\n\n<p><strong>history.js</strong></p>\n\n<pre class="lang-js prettyprint-override"><code>import createBrowserHistory from \'history/createBrowserHistory\'\nexport default createBrowserHistory()\n</code></pre>\n\n<p><strong>BasicComponent.js</strong></p>\n\n<pre class="lang-js prettyprint-override"><code>import React, { Component } from \'react\';\nimport history from \'./history\';\n\nclass BasicComponent extends Component {\n\n    goToIndex(e){\n        e.preventDefault();\n        history.push(\'/\');\n    }\n\n    render(){\n        return &lt;a href="#" onClick={this.goToIndex}&gt;Previous&lt;/a&gt;;\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p><strong>EDIT April 16th, 2018 :</strong></p>\n</blockquote>\n\n<p>If you have to navigate from a component that is actually rendered from a <code>Route</code> component, you can also access history from props, like that :</p>\n\n<p><strong>BasicComponent.js</strong></p>\n\n<pre class="lang-js prettyprint-override"><code>import React, { Component } from \'react\';\n\nclass BasicComponent extends Component {\n\n    navigate(e){\n        e.preventDefault();\n        this.props.history.push(\'/url\');\n    }\n\n    render(){\n        return &lt;a href="#" onClick={this.navigate}&gt;Previous&lt;/a&gt;;\n    }\n}\n</code></pre>\n',
  },
  {
    owner: {
      reputation: 1041,
      user_id: 5431545,
      user_type: 'registered',
      profile_image:
        'https://lh3.googleusercontent.com/-6ADkP-1Q4TU/AAAAAAAAAAI/AAAAAAAAABM/yWacKGRnYbQ/photo.jpg?sz=128',
      display_name: 'Alexey Volodko',
      link: 'https://stackoverflow.com/users/5431545/alexey-volodko',
    },
    is_accepted: false,
    score: 48,
    last_activity_date: 1522085366,
    last_edit_date: 1522085366,
    creation_date: 1458392390,
    answer_id: 36102045,
    question_id: 31079081,
    content_license: 'CC BY-SA 3.0',
    body:
      "<p>For this one, who does not control the server side and because of this is using hash router v2:</p>\n\n<p>Place your <a href=\"https://github.com/reactjs/react-router/issues/1967\" rel=\"noreferrer\">history</a> into separate file (e.g. app_history.js ES6):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>import { useRouterHistory } from 'react-router'\nimport { createHashHistory } from 'history'\nconst appHistory = useRouterHistory(createHashHistory)({ queryKey: false });\n\nexport default appHistory;\n</code></pre>\n\n<p>And use it everywhere!</p>\n\n<p>Your entry point for react-router (app.js ES6):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>import React from 'react'\nimport { render } from 'react-dom'\nimport { Router, Route, Redirect } from 'react-router'\nimport appHistory from './app_history'\n...\nconst render((\n  &lt;Router history={appHistory}&gt;\n  ...\n  &lt;/Router&gt;\n), document.querySelector('[data-role=\"app\"]'));\n</code></pre>\n\n<p>Your navigation inside any component (ES6):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>import appHistory from '../app_history'\n...\najaxLogin('/login', (err, data) =&gt; {\n  if (err) {\n    console.error(err); // login failed\n  } else {\n    // logged in\n    appHistory.replace('/dashboard'); // or .push() if you don't need .replace()\n  }\n})\n</code></pre>\n",
  },
  {
    owner: {
      reputation: 15999,
      user_id: 2762747,
      user_type: 'registered',
      accept_rate: 83,
      profile_image:
        'https://www.gravatar.com/avatar/6d016438453b0e1d4a07c9e2838c5f08?s=128&d=identicon&r=PG&f=1',
      display_name: 'Lyubomir',
      link: 'https://stackoverflow.com/users/2762747/lyubomir',
    },
    is_accepted: false,
    score: 42,
    last_activity_date: 1522090271,
    last_edit_date: 1522090271,
    creation_date: 1511348387,
    answer_id: 47432985,
    question_id: 31079081,
    content_license: 'CC BY-SA 3.0',
    body:
      '<blockquote>\n  <h2>React Router V4</h2>\n</blockquote>\n\n<p>tl:dr;</p>\n\n<pre class="lang-js prettyprint-override"><code>if (navigate) {\n  return &lt;Redirect to="/" push={true} /&gt;\n}\n</code></pre>\n\n<p><strong>The simple and declarative answer is that you need to use <code>&lt;Redirect to={URL} push={boolean} /&gt;</code> in combination with <code>setState()</code></strong></p>\n\n<blockquote>\n  <p><strong>push: boolean -</strong> when true, redirecting will push a new entry onto the history instead of replacing the current one.</p>\n</blockquote>\n\n<hr>\n\n<pre class="lang-js prettyprint-override"><code>import { Redirect } from \'react-router\'\n\nclass FooBar extends React.Component {\n  state = {\n    navigate: false\n  }\n\n  render() {\n    const { navigate } = this.state\n\n    // here is the important part\n    if (navigate) {\n      return &lt;Redirect to="/" push={true} /&gt;\n    }\n   // ^^^^^^^^^^^^^^^^^^^^^^^\n\n    return (\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; this.setState({ navigate: true })}&gt;\n          Home\n        &lt;/button&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n</code></pre>\n\n<p>Full example <a href="https://reacttraining.com/react-router/web/example/auth-workflow" rel="noreferrer">here</a>.\nRead more <a href="https://reacttraining.com/react-router/web/api/Redirect" rel="noreferrer">here</a>.</p>\n\n<p><em>PS. The example uses <a href="https://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#es7-property-initializers" rel="noreferrer">ES7+ Property Initializers</a> to initialise state. Look <a href="https://babeljs.io/blog/2015/06/07/react-on-es6-plus" rel="noreferrer">here</a> as well, if you\'re interested.</em></p>\n',
  },
  {
    owner: {
      reputation: 1304,
      user_id: 1505411,
      user_type: 'registered',
      accept_rate: 40,
      profile_image:
        'https://www.gravatar.com/avatar/61848a23c12b4a6dea12ed58a64f32be?s=128&d=identicon&r=PG',
      display_name: 'Qiming',
      link: 'https://stackoverflow.com/users/1505411/qiming',
    },
    is_accepted: false,
    score: 33,
    last_activity_date: 1522090028,
    last_edit_date: 1592644375,
    creation_date: 1435644883,
    answer_id: 31130888,
    question_id: 31079081,
    content_license: 'CC BY-SA 4.0',
    body:
      '<blockquote>\n<p><strong>Warning:</strong> this answer covers only ReactRouter versions before 1.0</p>\n<p>I will update this answer with 1.0.0-rc1 use cases after!</p>\n</blockquote>\n<p>You can do this without mixins too.</p>\n<pre class="lang-js prettyprint-override"><code>let Authentication = React.createClass({\n  contextTypes: {\n    router: React.PropTypes.func\n  },\n  handleClick(e) {\n    e.preventDefault();\n    this.context.router.transitionTo(\'/\');\n  },\n  render(){\n    return (&lt;div onClick={this.handleClick}&gt;Click me!&lt;/div&gt;);\n  }\n});\n</code></pre>\n<p>The gotcha with contexts is that it is not accessible unless you define the <code>contextTypes</code> on the class.</p>\n<p>As for what is context, it is an object, like props, that are passed down from parent to child, but it is passed down implicitly, without having to redeclare props each time. See <a href="https://www.tildedave.com/2014/11/15/introduction-to-contexts-in-react-js.html" rel="noreferrer">https://www.tildedave.com/2014/11/15/introduction-to-contexts-in-react-js.html</a></p>\n',
  },
  {
    owner: {
      reputation: 4498,
      user_id: 2308190,
      user_type: 'registered',
      accept_rate: 58,
      profile_image:
        'https://www.gravatar.com/avatar/2a9da794e76eb7f244c805380c5bf086?s=128&d=identicon&r=PG',
      display_name: 'Ben Wheeler',
      link: 'https://stackoverflow.com/users/2308190/ben-wheeler',
    },
    is_accepted: false,
    score: 29,
    last_activity_date: 1522089485,
    last_edit_date: 1522089485,
    creation_date: 1480514573,
    answer_id: 40890372,
    question_id: 31079081,
    content_license: 'CC BY-SA 3.0',
    body:
      "<p>I tried at least 10 ways of doing this before something worked right!</p>\n\n<p>@Felipe Skinner's <code>withRouter</code> answer was a bit overwhelming to me, and I wasn't sure I wanted to make new \"ExportedWithRouter\" class names.</p>\n\n<p>Here's the simplest and cleanest way to do it, circa current React-Router 3.0.0 and ES6:</p>\n\n<blockquote>\n  <p>React-Router 3.x.x with ES6:</p>\n</blockquote>\n\n<pre class=\"lang-js prettyprint-override\"><code>import { withRouter } from 'react-router';\n\nclass Example extends React.Component {\n   // use `this.props.router.push('/some/path')` here\n};\n\n// Export the decorated class\nexport default withRouter(Example);\n</code></pre>\n\n<p>or, if it's not your default class, export like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>withRouter(Example);\nexport { Example };\n</code></pre>\n\n<p>Note that in 3.x.x, the <code>&lt;Link&gt;</code> component itself is using <code>router.push</code>, so you can pass it anything you would pass the <code>&lt;Link to=</code> tag, like:</p>\n\n<pre><code>   this.props.router.push({pathname: '/some/path', query: {key1: 'val1', key2: 'val2'})'\n</code></pre>\n",
  },
  {
    owner: {
      reputation: 76286,
      user_id: 5423108,
      user_type: 'registered',
      profile_image: 'https://i.stack.imgur.com/WtfBG.png?s=128&g=1',
      display_name: 'Alireza',
      link: 'https://stackoverflow.com/users/5423108/alireza',
    },
    is_accepted: false,
    score: 23,
    last_activity_date: 1522093847,
    last_edit_date: 1522093847,
    creation_date: 1494838419,
    answer_id: 43975116,
    question_id: 31079081,
    content_license: 'CC BY-SA 3.0',
    body:
      "<p>To do the navigation programmatically, you need to push a new <strong>history</strong> to the <strong>props.history</strong> in your <code>component</code>, so something like this can do the work for you:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>//using ES6\nimport React from 'react';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick(e) {\n    e.preventDefault()\n    /* Look at here, you can add it here */\n    this.props.history.push('/redirected');\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button onClick={this.handleClick}&gt;\n          Redirect!!!\n        &lt;/button&gt;\n      &lt;/div&gt;\n    )\n  }\n}\n\nexport default App;\n</code></pre>\n",
  },
];
